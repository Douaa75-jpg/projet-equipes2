generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id                    String              @id @default(uuid())
  nom                   String
  prenom                String
  email                 String              @unique
  role                  Role
  motDePasse            String
  datedenaissance       DateTime?           @db.Date
  isActive              Boolean             @default(false)
  matricule             String?             @db.VarChar(255)
  registrationToken     String?             @db.VarChar(255)
  tokenExpiresAt        DateTime?
  resetPasswordToken    String?
  resetPasswordExpires  DateTime?
  status                StatutUtilisateur   @default(EN_ATTENTE)
  administrateur        Administrateur?
  employe               Employe?
  responsable           Responsable?

  approbationsRHEnvoyees ApprobationRH[]     @relation("ApprobationRHUtilisateur")  // demandes faites par ce user
  approbationsRHReçues   ApprobationRH[]     @relation("ApprobationRHResponsable")  // demandes qu'il doit approuver
}

model ApprobationRH {
  id               String             @id @default(uuid())
  utilisateurId    String
  responsableId    String
  dateDemande      DateTime           @default(now())
  dateApprobation  DateTime?
  statut           StatutApprobation  @default(EN_ATTENTE)
  commentaire      String?

  utilisateur      Utilisateur        @relation("ApprobationRHUtilisateur", fields: [utilisateurId], references: [id])
  responsable      Utilisateur        @relation("ApprobationRHResponsable", fields: [responsableId], references: [id])
}

enum StatutUtilisateur {
  EN_ATTENTE
  APPROUVE
  REJETE
}

enum StatutApprobation {
  EN_ATTENTE
  APPROUVEE
  REJETEE
}

model Employe {
  id            String         @id @default(uuid())
  responsableId String?
  heuresSupp    Float          @default(0)
  heuresTravail Float          @default(0)
  soldeConges   Int            @default(0)
  demandes      Demande[]
  utilisateur   Utilisateur    @relation(fields: [id], references: [id])
  responsable      Responsable?     @relation("EmployeResponsable", fields: [responsableId], references: [id], onDelete: SetNull)
  notifications Notification[]
  pointages     Pointage[]
  taches        Tache[]
}

model Tache {
  id          String      @id @default(uuid())
  employeId   String
  titre       String
  description String?
  date        DateTime    @default(now())
  statut      StatutTache @default(A_FAIRE)
  dateLimite  DateTime?
  employe     Employe     @relation(fields: [employeId], references: [id])
}

model Responsable {
  id               String           @id @default(uuid())
  typeResponsable  TypeResponsable?
  administrateurId String?
  employes         Employe[]        @relation("EmployeResponsable")
  notifications    Notification[]   
  administrateur   Administrateur?  @relation(fields: [administrateurId], references: [id])
  utilisateur      Utilisateur      @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Administrateur {
  id           String        @id @default(uuid())
  utilisateur  Utilisateur   @relation(fields: [id], references: [id])
  responsables Responsable[]
}

model Pointage {
  id           String    @id @default(uuid())
  employeId    String
  date         DateTime
  heure        DateTime  // Heure de pointage (entrée ou sortie)
  type         PointageType // ENTRÉE ou SORTIE
  employe      Employe   @relation(fields: [employeId], references: [id])
  
  @@index([employeId, date])
}

model Demande {
  id        String        @id @default(uuid())
  employeId String
  type      String
  dateDebut DateTime
  dateFin   DateTime?
  statut    StatutDemande @default(  EN_ATTENTE)
  raison    String?
  employe   Employe       @relation(fields: [employeId], references: [id])
}

model Notification {
  id            String       @id @default(cuid())
  message       String
  employeId     String?
  responsableId String?
  dateEnvoi     DateTime     @default(now())
  lu            Boolean      @default(false)
  type          String?
  employe       Employe?     @relation(fields: [employeId], references: [id])
  responsable   Responsable? @relation(fields: [responsableId], references: [id], onDelete: Cascade)
}

enum Role {
  EMPLOYE
  RESPONSABLE
  ADMINISTRATEUR
}

enum StatutDemande {
  EN_ATTENTE
  APPROUVEE
  REJETEE
}

enum PointageType {
  ENTREE
  SORTIE
}

enum TypeResponsable {
  RH
  CHEF_EQUIPE
}

enum Statut {
  PRESENT
  ABSENT
  RETARD
}

enum StatutTache {
  A_FAIRE
  EN_COURS
  TERMINEE
}
