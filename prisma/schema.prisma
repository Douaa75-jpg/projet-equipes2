generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id              String          @id @default(uuid())
  nom             String
  prenom          String
  email           String          @unique
  role            Role
  motDePasse      String
  matricule       String?         @db.VarChar(255)
  datedenaissance DateTime?       @db.Date
  registrationToken String?       @db.VarChar(255) // Nouveau champ
  tokenExpiresAt    DateTime?                     // Date d’expiration du lien
  isActive          Boolean       @default(false) // Pour bloquer l’accès si pas encore activé
  
  administrateur  Administrateur?
  employe         Employe?
  responsable     Responsable?
}

model Employe {
  id            String         @id @default(uuid())
  responsableId String?
  heuresSupp    Float          @default(0)
  heuresTravail Float          @default(0)
  soldeConges   Int            @default(0)
  demandes      Demande[]
  utilisateur   Utilisateur    @relation(fields: [id], references: [id])
  responsable   Responsable?   @relation("EmployeResponsable", fields: [responsableId], references: [id], onDelete: Cascade)
  notifications Notification[]
  pointages     Pointage[]
  taches        Tache[]
}

model Tache {
  id          String      @id @default(uuid())
  employeId   String
  titre       String
  description String?
  date        DateTime    @default(now())
  statut      StatutTache @default(A_FAIRE)
  dateLimite  DateTime?
  employe     Employe     @relation(fields: [employeId], references: [id])
}

model Responsable {
  id               String           @id @default(uuid())
  typeResponsable  TypeResponsable?
  administrateurId String?
  employes         Employe[]        @relation("EmployeResponsable")
  notifications    Notification[]
  administrateur   Administrateur?  @relation(fields: [administrateurId], references: [id])
  utilisateur      Utilisateur      @relation(fields: [id], references: [id])
}

model Administrateur {
  id           String        @id @default(uuid())
  utilisateur  Utilisateur   @relation(fields: [id], references: [id])
  responsables Responsable[]
}

model Pointage {
  id             String    @id @default(uuid())
  employeId      String
  date           DateTime
  heureArrivee   DateTime
  heureDepart    DateTime?
  statut         Statut
  heureDepartDej DateTime?
  heureRetourDej DateTime?
  deletedAt      DateTime?
  employe        Employe   @relation(fields: [employeId], references: [id])
}

model Demande {
  id        String        @id @default(uuid())
  employeId String
  type      String
  dateDebut DateTime
  dateFin   DateTime?
  statut    StatutDemande @default(SOUMISE)
  raison    String?
  employe   Employe       @relation(fields: [employeId], references: [id])
}

model Notification {
  id            String       @id @default(uuid())
  message       String
  employeId     String?
  responsableId String?
  dateEnvoi     DateTime     @default(now())
  lu            Boolean      @default(false)
  employe       Employe?     @relation(fields: [employeId], references: [id])
  responsable   Responsable? @relation(fields: [responsableId], references: [id])
}

model notification {
  id            String   @id(map: "PK_705b6c7cdf9b2c2ff7ac7872cb7") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  employeId     String   @db.VarChar
  responsableId String?  @db.VarChar
  message       String   @db.VarChar
  createdAt     DateTime @default(now()) @db.Timestamp(6)
}

enum Role {
  EMPLOYE
  RESPONSABLE
  ADMINISTRATEUR
}

enum StatutDemande {
  SOUMISE
  APPROUVEE
  REJETEE
}

enum TypeResponsable {
  RH
  CHEF_EQUIPE
}

enum Statut {
  PRESENT
  ABSENT
  RETARD
}

enum StatutTache {
  A_FAIRE
  EN_COURS
  TERMINEE
}
